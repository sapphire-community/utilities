name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  Linting:
    name: Linting
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: npm ci
      - name: Build ESLint and Prettier configs
        run: npx lerna run build --parallel --scope=@sapphire/eslint-config --scope=@sapphire/prettier-config
      - name: Run ESLint
        run: npm run lint -- --fix=false

  Testing:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: npm ci
      - name: Build Utilities
        run: npx lerna run build --scope=@sapphire/utilities
      - name: Run tests
        run: npm run test -- --coverage
      - name: Store code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage/

  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: npm ci
      - name: Compile Projects
        run: npm run build

  Upload_Coverage_Report:
    name: Upload coverage report to codecov
    needs: [Testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Download Coverage report
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: coverage/
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
          fail_ci_if_error: true
